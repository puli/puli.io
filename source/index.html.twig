---
layout: base
section: features
---
{% block title %}Puli - Universal Packages for PHP{% endblock %}

{% block body %}
    <div class="container-fluid slide slide1">
        <div class="container">
            {% include 'header.html.twig' with {'navbar_class': 'navbar-transparent'} %}
        </div>
        <div class="container slide-body">
            <h1>Universal Packages for PHP</h1>

            <p class="lead">Easy to install. Platform independent.</p>
        </div>
    </div>

    <section class="slide slide2">
        <div class="container slide-body">
            <p class="text-center">Logos of reference projects.</p>
        </div>
    </section>

    <section class="slide slide3">
        <div class="container slide-body">
            <h1>The Puli Package</h1>

            <p class="lead">A universal package concept.</p>

            <p>Puli (pronounced "poo-lee") is a toolkit for creating and loading
                PHP packages. A Puli package is a directory that contains a
                <code>puli.json</code> file. This file configures how Puli loads
                the package.</p>

<pre><code class="language-none">my-package/
    src/
        ... PHP classes ...
    res/
        ... resource files ...
    puli.json
</code></pre>

            <p>Typically, Puli
                packages are distributed and installed with
                <a href="https://getcomposer.org" title="Composer, the dependency manager for PHP">Composer</a>:</p>

            <pre><code class="language-none">$ composer require vendor/my-package</code></pre>

            <p>The <a href="">Puli plugin for Composer</a> recognizes and
                activates installed packages. You can also use other channels of
                distribution and activate your packages manually.</p>
        </div>
    </section>

    <section class="slide slide2">
        <div class="container slide-body">
            <h1>Puli for Enterprises</h1>

            <p class="lead">Build flexible plugin systems.</p>

            <p>Puli packages can be installed in two ways: Use Composer or copy
                them to your project and activate them manually with the
                <code>puli</code> command. Once a Puli package is installed, it
                discovers and uses other Puli packages almost automatically.
                This allows you to build flexible plugin infrastructures that
                can easily be maintained by non-technical users.</p>

            <p class="text-center" style="padding: 10px; border: 1px solid lightgray">Graphic that shows packages that discover each other automatically.</p>
        </div>
    </section>

    <section class="slide slide3">
        <div class="container slide-body">
            <h1>Puli for <abbr title="Open-Source Software">OSS</abbr> Projects</h1>

            <p class="lead">Share with other communities.</p>

            <p>Puli handles all of your package management concerns. Want to
                build a theming system? Need to find certain files in the
                installed packages of a project? Let Puli do it for you. And
                best of all, contrary to "bundles" or "modules" of current PHP
                frameworks Puli packages can be shared with other communities
                that support Puli as well.</p>

            <p class="text-center" style="padding: 10px; border: 1px solid lightgray">Graphic that shows how a Puli package can be used with different PHP frameworks or without any framework.</p>
        </div>
    </section>

    <section class="slide slide4">
        <div class="container slide-body">
            <h1>Powerful Features</h1>

            <p class="lead">Composer packages on steroids.</p>

            <h2>Resource Access</h2>

            <p>Puli provides a naming convention to load non-PHP files, such as
                YAML, XML, CSS, HTML, images and more from a Puli package. We
                call them <em>resources</em>. Resources are accessed through
                <em>Puli paths</em>:</p>

            <pre><code class="language-php">echo $twig->render('/batman/blog/views/index.html.twig');</code></pre>

            <p>Puli paths usually start with the name of the package that contains the
                loaded file.</p>

            <h2>Class Discovery</h2>

            <p>With Puli, you can find classes that implement specific
                interfaces from other packages. For example, if you create a
                <code>Plugin</code> interface, you can load all classes
                implementing that interface with Puli's <code>Discovery</code>:</p>

<pre><code class="language-php">use Thor\Core\Plugin;

foreach ($discovery->findBindings(Plugin::class) as $binding) {
    $pluginClass = $binding->getClassName();
    $plugin = new $pluginClass();

    // do something...
}</code></pre>

            <p>Classes can only be found if they were exported by their package.
                This is done by the package author with Puli's Command Line
                Interface (CLI):</p>

            <pre><code class="language-none">$ puli bind Batman\\BlogPlugin Thor\\Core\\Plugin</code></pre>

            <h2>Resource Discovery</h2>

            <p>Like classes, you can also discover resources in other packages.
                For example, if you implement a <code>Translator</code> class,
                you can load message files that contain the translations you
                want to use:</p>

<pre><code class="language-php">foreach ($discovery->findBindings('thor/message-catalog') as $binding) {
    foreach ($binding->getResources() as $resource) {
        $yaml = $resource->getBody();

        // do something...
    }
}</code></pre>

            <p>Instead of an interface name, we use a simple string
                <code>"thor/message-catalog"</code> to discover the resources.
                As with classes, resources need to be exported by the author of
                their package before we can find them:</p>

            <pre><code class="language-none">$ puli bind /batman/blog/trans/messages.*.yml thor/message-catalog</code></pre>

            <h2>Resource URLs</h2>

            <p>Puli can be used to generate URLs of your public resources, such
                as your CSS stylesheets or images:</p>

            <pre><code class="language-twig">{% raw %}&lt;img src="{{ resource_url('/batman/blog/public/logo.png') }}" /&gt;{% endraw %}</code></pre>

            <p>You use Puli paths in your code to generate the URLs. The
                application that uses your package finally configures how the
                URLs should be generated.</p>

            <h2>Package Overriding</h2>

            <p>Puli makes it easy to let your package override another package.
                For example, let's override the <code>layout.html.twig</code>
                file of the <code>batman/blog</code> package in our application:</p>

            <pre><code class="language-none">$ puli map /batman/blog/views/layout.html.twig res/views/layout.html.twig</code></pre>

            <p>Wherever that <code>layout.html.twig</code> file is used, our
                own file will now be used instead.</p>
        </div>
    </section>

    <div class="container">
        {% include 'footer.html.twig' %}
    </div>
{% endblock %}
