---
layout: base
section: features
---
{% block title %}Puli - Universal Packages for PHP{% endblock %}

{% block body %}
    <div class="container-fluid slide slide1">
        <div class="container">
            {% include 'header.html.twig' with {'navbar_style': 'navbar-inverse'}%}
        </div>
        <div class="container slide-body">
            <h1>Universal Packages for PHP</h1>

            <p class="lead">Easy to install. Platform independent.</p>
        </div>
    </div>

    <section class="slide slide2">
        <div class="container slide-body">
            <h1>One PHP Community</h1>

            <p class="lead">Embrace collaboration and sharing.</p>

            <p>Puli (pronounced "poo-lee") is a toolkit for creating and loading
                PHP packages. Puli's goal is to support collaboration and
                sharing in the PHP community by replacing the "bundle", "module"
                and "plugin" concepts of different platforms by one common
                solution.</p>

            <p class="text-center"><img src="/images/community.png" alt="Unify the PHP community."/></p>
        </div>
    </section>

    <section class="slide slide3">
        <div class="container slide-body">
            <h1>The Puli Package</h1>

            <p class="lead">A universal package concept.</p>

            <p>A Puli package is a directory that contains a <code>puli.json</code> file.
                This file configures how Puli loads the package.</p>

<pre><code class="language-none">my-package/
    src/
        ... PHP classes ...
    res/
        ... resource files ...
    puli.json
</code></pre>

            <p>Typically, Puli
                packages are distributed and installed with
                <a href="https://getcomposer.org" title="Composer, the dependency manager for PHP">Composer</a>:</p>

            <pre><code class="language-none">$ composer require vendor/my-package</code></pre>

            <p>The <a href="">Puli plugin for Composer</a> recognizes and
                activates installed packages. You can also use other channels of
                distribution and activate your packages manually.</p>
        </div>
    </section>

    <section class="slide slide4">
        <div class="container slide-body">
            <h1>Powerful Features</h1>

            <p class="lead">Composer packages on steroids.</p>

            <h2>Resource Access</h2>

            <p>Puli provides a naming convention to load non-PHP files, such as
                YAML, XML, CSS, HTML, images and more from a Puli package. We
                call them <em>resources</em>. Resources are accessed through
                <em>Puli paths</em>:</p>

            <pre><code class="language-php">echo $twig->render('/batman/blog/views/index.html.twig');</code></pre>

            <p>Puli paths usually start with the name of the package that contains the
                loaded file.</p>

            <h2>Class Discovery</h2>

            <p>With Puli, you can find classes that implement specific
                interfaces from other packages. For example, if you create a
                <code>Plugin</code> interface, you can load all classes
                implementing that interface with Puli's <code>Discovery</code>:</p>

<pre><code class="language-php">use Thor\Core\Plugin;

foreach ($discovery->findBindings(Plugin::class) as $binding) {
    $pluginClass = $binding->getClassName();
    $plugin = new $pluginClass();

    // do something...
}</code></pre>

            <p>Classes can only be found if they were exported by their package.
                This is done by the package author with Puli's Command Line
                Interface (CLI):</p>

            <pre><code class="language-none">$ puli bind Batman\\BlogPlugin Thor\\Core\\Plugin</code></pre>

            <h2>Resource Discovery</h2>

            <p>Like classes, you can also discover resources in other packages.
                For example, if you implement a <code>Translator</code> class,
                you can load message files that contain the translations you
                want to use:</p>

<pre><code class="language-php">foreach ($discovery->findBindings('thor/message-catalog') as $binding) {
    foreach ($binding->getResources() as $resource) {
        $yaml = $resource->getBody();

        // do something...
    }
}</code></pre>

            <p>Instead of an interface name, we use a simple string
                <code>"thor/message-catalog"</code> to discover the resources.
                As with classes, resources need to be exported by the author of
                their package before we can find them:</p>

            <pre><code class="language-none">$ puli bind /batman/blog/trans/messages.*.yml thor/message-catalog</code></pre>

            <h2>Resource URLs</h2>

            <p>Puli can be used to generate URLs of your public resources, such
                as your CSS stylesheets or images:</p>

            <pre><code class="language-twig">{% raw %}&lt;img src="{{ resource_url('/batman/blog/public/logo.png') }}" /&gt;{% endraw %}</code></pre>

            <p>You use Puli paths in your code to generate the URLs. The
                application that uses your package finally configures how the
                URLs should be generated.</p>
        </div>
    </section>

    <div class="container">
        {% include 'footer.html.twig' %}
    </div>
{% endblock %}
